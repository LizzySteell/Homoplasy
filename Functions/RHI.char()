 
 ####### 2025-10-20

##### RHI FUNCTION TO CALCULATE PER CHARACTER RHI VALUES#####

### V1.1 fixes problems due to using site-wise parsimony function.

### Dependencies: packages 'phangorn', 'ape', as well as functions from this package.


### Current version cannot calculate RHI for ordered multistate characters.

### Reports 0 when no homoplasy (extra steps) is observed for a character.


RHI.char <- function(data, tree, n){ 
	
	### 
	
	#data - a morphological phydat object generated using morph.phydat().
	#tree - a phylogenetic tree (object of class phylo)
	#n - number of randomisations (n = 1000 much slower than n = 100)

	# Make matrix object from phydat with round brackets for polymorphisms
	
	matrix <- uncert.to.poly(as.matrix(data))
	
	# Get number of characters from dataset
	nchar <- dim(as.matrix(data))[2]
	
	#Put each character in phydat format into a list
	char_list <- c()
	for(i in 1:nchar){
		char_list[[i]] <- data[,i]
	}
	
	#lmin for individual characters is total number states -1 
	
	
	#Create a list of lmins per character
	lmin_chars <- c()
	for(k in 1:length(char_list)){
		lmin_chars[[k]] <- length(get.states(matrix[,k])) - 1
	}
	
	lmin_chars <- unlist(lmin_chars)
	
	#Caluculate Lnull as normal
	
	#Subfunction to randomise tips and keep topology
	rtips <- function(tree){
		new_tips <- sample(tree$tip.label)
		Rtree <- tree
	Rtree$tip.label <- new_tips
	return(Rtree)
	}
	#Replicates tip randomising n times and creates a list of trees
	random_trees <- replicate(n, rtips(tree), simplify=FALSE)
	
	
	### For now, just for unordered characters - otherwise cost matrix has to be calculated per character
		
		null_tlengths_char <- c()
		for(m in 1:length(char_list)){
	
	null_tlengths_char[[m]] <- unlist(lapply(random_trees, parsimony, char_list[[m]])) 
	
		}
	
	# Calculate median Lnull per character
	
	Lnull_char_med <- as.numeric(unlist(lapply(null_tlengths_char, quantile, prob=0.5)))
	
	# Calculate character length for each character
	
	# char_lengths <- parsimony(tree, data, site='site') # For some reason this is making the wrong parsimony scores so let's calculate the scores separately
	
	char_lengths <- c()
	for(b in 1:length(char_list)){
		char_lengths[b] <- parsimony(tree, char_list[[b]])
	}
	
	
	# Subtract lmin from values and create new objects
	
	char_lengths_minus_lmin <- c()
	for(h in 1:length(char_lengths)){
		char_lengths_minus_lmin[h] <- char_lengths[h] - lmin_chars[h]
	}
	# Some characters have value of 0 (0 extra steps observed), so homoplasy has to be numerically zero.
	# These should be excluded or NaNs from RHI equation should be converted to zero to reflect minimum homoplasy.
	
	
	Lnull_minus_lmin <- c()
	for(g in 1:length(Lnull_char_med)){
		Lnull_minus_lmin[g] <- Lnull_char_med[g] - lmin_chars[g]
	}
	 # Some of these values are also zero
	
	# Calculate RHI per character from median character length.
	
		RHI_char <- (char_lengths_minus_lmin)/(Lnull_minus_lmin)
		
		
	# Convert NaNs to zeros
	
	RHI_char[RHI_char == "NaN"] <- 0
		
		
		return(RHI_char)
	
	}
