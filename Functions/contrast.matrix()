####### 2024-01-29

##### CONTRAST MATRIX FUNCTION v4.1 #####

####### Contrast matrix builder

# Version 4.1 is updated so the function can deal with polymorphisms and uncertainties. It also can deal with matrices without any polymorphisms.
# Polymorphisms (denoted with round brackets) and uncertainties (denoted with curly brackets) are treated the same.
# Newest update: changes the contrast matrix into a matrix object, rather than dataframe object, so it is compatible with Phangorn package.

# Dependencies: packages 'assertive.base', 'stringr'

########

contrast.matrix <- function(data) 

# data - Phylogenetic matrix (in simple matrix array format) where row names are taxa and columns are characters. Gaps ('-') are treated as ambiguities ('?')
	 {
	 	
	 	#Change all '-' values to '?'
	 	data[data == '-'] <- '?'
	 	
	 	
	 	scores <- row.names(table(data)) #Makes a vector of all the possible scores, including ambiguities and polymorphisms
	 	
	 	#Make a subfunction to extract polymorphisms from parentheses - round brackets
	 	paren_extract <- function(x){
		#x is a single character string with parenthesis and values inside e.g. "(01)"
		
		x_extract <- gsub("[\\(\\)]","",regmatches(x, gregexpr("\\(.*?\\)", x))[[1]]) #This line of code extracts values from their parenthesis from a single character string
                 
		return(x_extract)
		}
		
		#Make a subfunction to extract uncertainties from parentheses - curly brackets
	 	curly_extract <- function(x){
		#x is a single character string with parenthesis and values inside e.g. "(01)"
		
		x_extr_curl <- gsub("[\\{\\}]","",regmatches(x, gregexpr("\\{.*?\\}", x))[[1]]) #This line of code extracts values from their curly braces from a single character string
                 
		return(x_extr_curl)
		}
		
		#Make vectors of polymorphisms - with and without round brackets
			 #This has no brackets
			polys <- unlist(lapply(scores, paren_extract))
			
		#Make vectors of uncertainties
			curly <- unlist(lapply(scores, curly_extract))
			curly <- parenthesize(curly, "curly") #This has curly brackets

			if(length(curly) != 0){
				scores <- scores[!scores %in% curly]
			}
			
			#Combine polymorphisms and uncertainties and remove duplicates
			polys <- unique(c(curly, polys))
			
			if(length(polys) != 0){
			
			 #This has brackets
			polys_brackets <- unlist(lapply(polys, parenthesize))
			
		states <- scores[!scores %in% c("?", polys_brackets)] #Makes a vector of the possible states - '0', '1', '2' etc. Excludes ambiguities and polymorphisms.
		
			} else { #If no polymorphisms/uncertainties
			
			states <- scores[!scores %in% c("?")] #Makes a vector of the possible states - '0', '1', '2' etc. Excludes ambiguities.
		}
			
	#Make the contrast matrix template based on the dimensions of the states and scores.
	 	matrix <- matrix(nrow=length(scores), ncol=length(states), dimnames=list(scores, states))
	 	matrix <- as.data.frame(matrix)
	 	rownames(matrix) <- scores
	 	colnames(matrix) <- states
	 	
	 	for(i in 1:length(scores)){
	 		
	 		#Fill in the matrix for the state values
	 		for(j in 1:length(states))
	 			if(scores[i] == states[j]){
	 			matrix[i,j] <- 1 } else {
	 				matrix[i,j] <- 0
	 		}
	 		
	 		#Fill in the matrix for the ambiguity values
	 				for(k in 1:length(scores)){
	 					if(scores[k] == "?"){
	 					matrix[k,] <- 1 } #This puts a '1' for every column in the ambiguity row ("?")
	 					
	 		if(length(polys) != 0){
	 		
	 		#Fill in the matrix for the polymorphism values
	 			for(k in 1:length(polys)){
	 			
	 			poly_ind <- str_split_1(polys[k], "") #This splits the polymorphism values into separate parts
	 		
	 				if(scores[i] == polys_brackets[k]){
	 				
	 					for(o in 1:length(poly_ind)){
	 				
	 					matrix[polys_brackets[k], poly_ind[o]] <- 1 }		
	 		}	
	 					}
	 				}
	 		}
	 	}
		matrix <- as.matrix(matrix)
	 		return(matrix) }
