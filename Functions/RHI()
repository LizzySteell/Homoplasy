
####### 2023-11-08

##### RHI FUNCTION #####

### V2: Adding code that means gaps ('-') present in the dataset will be interpreted as ambiguities ('?').

####### Calculates the Relative Homoplasy Index for a given phylogenetic dataset of discrete characters with a given topology.


RHI <- function(data, tree, n, contrast, ord=NULL, cost=NULL) { 
	
	#data - a matrix array of discrete matrix with taxa as rows and characters as columns.
	#tree - a phylogenetic tree (object of class phylo)
	#n - number of randomisations
	#contrast - a contrast matrix of the character states and scores
	#ord - a vector listing the character numbers of ordered characters
	#cost - a cost matrix of the step-wise cost of each character state transition
	#If ord is specified, cost must also be specified. If not supplied, all characters are treated as unordered.

	#Change gaps into ambiguities
	data[data == '-'] <- '?'

	#Subfunction to randomise tips and keep topology
	rtips <- function(tree) {
		new_tips <- sample(tree$tip.label)
		Rtree <- tree
	Rtree$tip.label <- new_tips
	return(Rtree)
	}
	#Replicates tip randomising n times and creates a list of trees
	random_trees <- replicate(n, rtips(tree), simplify=FALSE)
	
	#Subfunction to calculate tree length for each random tree
	tree_length <- function(tree, data, ord=NULL, cost=NULL){
	tlengths <- c()
	phydats <- c()
		for(k in 1:dim(data)[2]){ #For each character in the matrix.
		
			phydats[[k]] <- phyDat(data[,k], type="USER", contrast=contrast) #Makes an individual phydat object for every character.
			tlengths[[k]] <- parsimony(tree, phydats[[k]]) #Calculates character length for each character. Note: at this point, all characters unordered.
			
			for(j in ord){ #For each value in the ordered character vector (if applicable).
		
					phydats[[j]] <- phyDat(data[,j], type="USER", contrast=contrast) #Makes new phydats for the ordered characters, and keeps their correct place in the list of phydats (i.e., list of characters).
					tlengths[[j]] <- parsimony(tree, phydats[[j]], cost=cost) #Calculates character length for each ordered character.
			}
	
		}
	sum(unlist(tlengths)) 
	} #Output is the tree length (number of steps) for the matrix with that topology, including ordered characters.
	
	null_tlengths <- unlist(lapply(random_trees, tree_length, data, ord=ord, cost=cost)) #Calculates the tree length for the matrix when each randomised topology is applied, and creates a vector of n parsimony scores. Note: the 	empirical dataset stays the same and is not altered.
	
	Lnull <- quantile(null_tlengths, prob=0.5) #Calculates the median tree length for the randomised 	trees.
	Lnull5 <- quantile(null_tlengths, prob=0.05)
	Lnull95 <- quantile(null_tlengths, prob=0.95) 
	
	#Calculate frequency of each character type (i.e., number of two-state characters, number of three-state characters etc)
	states <- c()
		for(i in 1:ncol(data)){
		states[[i]] <- length(unique(data[,i])[! unique(data[,i]) %in% c("?", "{01}", "{02}", "{03}", "{04}", "{05}", "{06}","{12}", "{13}", "{14}", "{15}", "{16}", "{23}", "{24}", "{25}", "{26}", "{34}", "{35}", "{36}", "{45}", "{46}", "{56}" ,"{012}", "{013}", "{014}", "{015}", "{016}", "{123}", "{124}", "{125}", "{126}", "{134}", "{135}", "{136}", "{145}", "{146}", "{156}", "{234}", "{235}", "{236}", "{245}", "{246}", "{256}", "{345}", "{346}", "{356}", "{456}", "{0123}", "{0124}", "{0125}", "{0126}", "{0134}", "{0135}", "{0136}", "{0145}", "{0146}", "{0156}", "{0234}", "{0235}", "{0236}", "{0245}", "{0246}", "{0256}", "{0345}", "{0346}", "{0356}", "{0456}" )]) #Excludes ambiguities and polymorphisms from being included as another state for each character. If polymorphisms go beyond these options, then they will need to be added into the function here.
	 
}
	lmin <- c()
	
	for(l in 1:length(sort(unique(unlist(states))))){ #For each frequency of each character type (as in two-state, three-state etc)
		lmin[[l]] <- 
					(table(sort(unlist(states)))[l] #Frequencies of each character type. Total adds up to total number of characters.
					*
					(sort(unique(unlist(states)))[l]-1)) #Each character type e.g., 2, 3, 4 (two-states, three-states, four-states), minus one.
						
	}
	
	lmin <- sum((unlist(lmin))) #Sum each value to get the minimum number of steps for the matrix.
	
	L <- tree_length(tree, data, ord=ord, cost=cost) #Calculates the parsimony score of the matrix with the supplied tree.
	
	
	RHI_low <- (L-lmin)/(Lnull5-lmin) #Calculates the lower bound of the 95% CI.
	RHI <- (L-lmin)/(Lnull-lmin) #Calculates the RHI for the median null tree length (Lnull).
	RHI_high <- (L-lmin)/(Lnull95-lmin) #Calculates the RHI for the upper bound of the 95% CI
	
	
	names(RHI_low) <- "5% quantile"
	names(RHI) <- "RHI"
	names(RHI_high) <- "95% quantile"
	names(L) <- "Tree Length" #Prints the empirical tree length.
	names(lmin) <- "Lmin"
	
	print(c(RHI_low, RHI, RHI_high, L, lmin))
	
	}
