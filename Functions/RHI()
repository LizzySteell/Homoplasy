####### 2023-11-08

##### RHI FUNCTION #####

### V3: Adding code that uses the wrapper function 'morph.phydat' that prepares a phyDat object using a morphological dataset. Changes uncertainties to polymorphisms, as well as gaps to ambiguities. Creates a contrast matrix so that contrast is no longer a separate argument. Uses the 'statef' state frequencies function.

####### Calculates the Relative Homoplasy Index for a given phylogenetic dataset of discrete characters with a given topology.


RHI <- function(data, tree, n, ord=NULL, cost=NULL) { 
	
	#data - a matrix array of discrete matrix with taxa as rows and characters as columns.
	#tree - a phylogenetic tree (object of class phylo)
	#n - number of randomisations
	#ord - a vector listing the character numbers of ordered characters
	#cost - a cost matrix of the step-wise cost of each character state transition
	#If ord is specified, cost must also be specified. If not supplied, all characters are treated as unordered.
	
	data[data == "-"] <- "?" # Changes gaps to ambiguities
	data <- uncert.to.poly(data) # Changes curly brackets to round brackets

	#Subfunction to randomise tips and keep topology
	rtips <- function(tree) {
		new_tips <- sample(tree$tip.label)
		Rtree <- tree
	Rtree$tip.label <- new_tips
	return(Rtree)
	}
	#Replicates tip randomising n times and creates a list of trees
	random_trees <- replicate(n, rtips(tree), simplify=FALSE)
	
	#Subfunction to calculate tree length for each random tree
	tree_length <- function(tree, data, ord=NULL, cost=NULL){
	tlengths <- c()
	phydats <- c()
		for(k in 1:dim(data)[2]){ #For each character in the matrix.
		
			phydats[[k]] <- morph.phydat(data[,k]) #Makes an individual phydat object for every character.
			tlengths[[k]] <- parsimony(tree, phydats[[k]]) #Calculates character length for each character. Note: at this point, all characters unordered.
			
			for(j in ord){ #For each value in the ordered character vector (if applicable).
		
					phydats[[j]] <- morph.phydat(data[,j]) #Makes new phydats for the ordered characters, and keeps their correct place in the list of phydats (i.e., list of characters).
					tlengths[[j]] <- parsimony(tree, phydats[[j]], cost=cost) #Calculates character length for each ordered character.
			}
	
		}
	sum(unlist(tlengths)) 
	} #Output is the tree length (number of steps) for the matrix with that topology, including ordered characters.
	
	null_tlengths <- unlist(lapply(random_trees, tree_length, data, ord=ord, cost=cost)) #Calculates the tree length for the matrix when each randomised topology is applied, and creates a vector of n parsimony scores. Note: the 	empirical dataset stays the same and is not altered.
	
	Lnull <- quantile(null_tlengths, prob=0.5) #Calculates the median tree length for the randomised 	trees.
	Lnull5 <- quantile(null_tlengths, prob=0.05)
	Lnull95 <- quantile(null_tlengths, prob=0.95) 
	
	#Calculate frequency of each character type (i.e., number of two-state characters, number of three-state characters etc)
	
	scores <- row.names(table(data)) #Makes a vector of all the possible scores, including ambiguities and polymorphisms
	 	
	 	#Make a subfunction to extract polymorphisms from parentheses - round brackets
	 	paren_extract <- function(x){
		#x is a single character string with parenthesis and values inside e.g. "(01)"
		
		x_extract <- gsub("[\\(\\)]","",regmatches(x, gregexpr("\\(.*?\\)", x))[[1]]) #This line of code extracts values from their parenthesis from a single character string
                 
		return(x_extract)
		}
		
		#Make vectors of polymorphisms - with and without round brackets
			polys <- c()
			for(i in 1:length(scores)){
			polys[[i]] <- paren_extract(scores[i])
			}
			polys <- unlist(polys) #This has no brackets
			
			if(length(polys) != 0){
			
			polys_brackets <- c()
			for(o in 1:length(polys)){
				polys_brackets[[o]] <- parenthesize(polys[o])
			}
			polys_brackets <- unlist(polys_brackets) #This has brackets
			
		states <- scores[!scores %in% c("?", polys_brackets)] #Makes a vector of the possible states - '0', '1', '2' etc. Excludes ambiguities and polymorphisms.
		
			} else { #If no polymorphisms/uncertainties
			
			states <- scores[!scores %in% c("?")] #Makes a vector of the possible states - '0', '1', '2' etc. Excludes ambiguities.
		}
	 
	#State frequencies
	f <- statef(data)

	#lmin is theoretical minimum tree length
	lmin <- c()

	for(l in 1:length(states)){
		lmin[[l]] <- (as.numeric(states)[l]) * (f[l]*dim(data)[2])
	}
	
	lmin <- sum((unlist(lmin))) #Sum each value to get the minimum number of steps for the matrix.
	
	L <- tree_length(tree, data, ord=ord, cost=cost) #Calculates the parsimony score of the matrix with the supplied tree.
	
	
	RHI_low <- (L-lmin)/(Lnull5-lmin) #Calculates the lower bound of the 95% CI.
	RHI <- (L-lmin)/(Lnull-lmin) #Calculates the RHI for the median null tree length (Lnull).
	RHI_high <- (L-lmin)/(Lnull95-lmin) #Calculates the RHI for the upper bound of the 95% CI
	
	
	names(RHI_low) <- "5% quantile"
	names(RHI) <- "RHI"
	names(RHI_high) <- "95% quantile"
	names(L) <- "Tree Length" #Prints the empirical tree length.
	names(lmin) <- "Lmin"
	
	print(c(RHI_low, RHI, RHI_high, L, lmin))
	
	}
