####### 2024-01-29

##### RHI FUNCTION #####

### V1.0: Adding code that uses the wrapper function 'morph.phydat' that prepares a phyDat object using a morphological dataset.
###Changes uncertainties to polymorphisms, as well as gaps to ambiguities.
###Creates a contrast matrix so that contrast is no longer a separate argument.
###Uses the 'statef' state frequencies function.
###Includes specifying ordered characters with a cost matrix and vector of specific ordered characters.

### Dependencies: packages 'phangorn', 'assertive.base', 'ape', as well as functions from this package.

####### Calculates the Relative Homoplasy Index for a given phylogenetic dataset of discrete characters with a given topology.


#RHI function including ordered characters

RHI <- function(data, tree, n, ord=NULL, cost=NULL){ 
	
	### 
	
	#data - a morphological phydat object generated using morph.phydat().
	#tree - a phylogenetic tree (object of class phylo)
	#n - number of randomisations
	#ord - a vector containing numbers for the specific ordered characters in the dataset
	#cost - a cost matrix specifing the cost per character state change (transition)

	#Subfunction to randomise tips and keep topology
	rtips <- function(tree){
		new_tips <- sample(tree$tip.label)
		Rtree <- tree
	Rtree$tip.label <- new_tips
	return(Rtree)
	}
	#Replicates tip randomising n times and creates a list of trees
	random_trees <- replicate(n, rtips(tree), simplify=FALSE)
	
	### If no ordered characters:
	
	if(is.null(c(ord, cost))) {
	
	null_tlengths <- unlist(lapply(random_trees, parsimony, data)) #Calculates the tree length for the matrix when each randomised topology is applied, and creates a vector of n parsimony scores. Note: the empirical dataset stays the same and is not altered.
	
	} else{
	
	### If ordered characters are specified:
	
	#calculate parsimony score for each random tree with the ordered character subset
	null_tlengths_ord <- unlist(lapply(random_trees, parsimony, data[,ord], cost=cost))
	
	#calulcate parsimony score for each random tree with the unordered character subset
	null_tlengths_no_ord <- unlist(lapply(random_trees, parsimony, data[,-ord]))
	
	#add together the values for each random tree
	null_tlengths <- null_tlengths_ord + null_tlengths_no_ord 
	
	}
	
	Lnull <- quantile(null_tlengths, prob=0.5) #Calculates the median tree length for the randomised 	trees.
	Lnull5 <- quantile(null_tlengths, prob=0.05)
	Lnull95 <- quantile(null_tlengths, prob=0.95) 
	
	#Calculate frequency of each character type (i.e., number of two-state characters, number of three-state characters etc)
	
	matrix <- t(as.data.frame(data))
	
	states <- get.states(matrix)
	 
	#State frequencies
	f <- statef(matrix)

	#lmin is theoretical minimum tree length
	lmin <- c()

	for(l in 1:length(f)){
		lmin[[l]] <- ((as.numeric(states)[l+1]) * (f[l]*dim(matrix)[2]))
	}
	
	#Exclude NAs in case multistate characters miss states (e.g. character that has max 9 states actually has 8 states)
	
	lmin <- na.omit(unlist(lmin))
	
	lmin <- sum(as.numeric(lmin)) #Sum each value to get the minimum number of steps for the matrix.
	
	#Depending on whether ordered characters are specified or not, value of L will change:
	
	if(is.null(ord)){
	L <- parsimony(tree, data) #Calculates the parsimony score of the matrix with the supplied tree.
	} else {
		
		L1 <- parsimony(tree, data[,ord], cost=cost)
		L2 <- parsimony(tree, data[,-ord])
		L = L1 + L2
	}
	
	RHI_low <- (L-lmin)/(Lnull95-lmin) #Calculates the lower bound of the 95% CI.
	RHI <- (L-lmin)/(Lnull-lmin) #Calculates the RHI for the median null tree length (Lnull).
	RHI_high <- (L-lmin)/(Lnull5-lmin) #Calculates the RHI for the upper bound of the 95% CI
	
	
	names(RHI_low) <- "5% quantile"
	names(RHI) <- "RHI"
	names(RHI_high) <- "95% quantile"
	names(L) <- "Tree Length" #Prints the empirical tree length.
	names(lmin) <- "Lmin"
	
	return(c(RHI_low, RHI, RHI_high, L, lmin))
	
	}
