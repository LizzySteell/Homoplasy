##### 2023-11-08

### STATE FREQUENCY FUNCTION v2
######
### Calculate state frequencies in a matrix


statef <- function(data){
	#data - matrix array character taxon matrix
	
	data[data == "-"] <- "?" # Changes gaps to ambiguities
	data <- uncert.to.poly(data) # Changes curly brackets to round brackets
	
	scores <- row.names(table(data)) #Makes a vector of all the possible scores, including ambiguities and polymorphisms
	 	
	 	#Make a subfunction to extract polymorphisms from parentheses - round brackets
	 	paren_extract <- function(x){
		#x is a single character string with parenthesis and values inside e.g. "(01)"
		
		x_extract <- gsub("[\\(\\)]","",regmatches(x, gregexpr("\\(.*?\\)", x))[[1]]) #This line of code extracts values from their parenthesis from a single character string
                 
		return(x_extract)
		}
		
		#Make vectors of polymorphisms - with and without round brackets
			polys <- c()
			for(i in 1:length(scores)){
			polys[[i]] <- paren_extract(scores[i])
			}
			polys <- unlist(polys) #This has no brackets
			
			if(length(polys) != 0){
			
			polys_brackets <- c()
			for(o in 1:length(polys)){
				polys_brackets[[o]] <- parenthesize(polys[o])
			}
			polys_brackets <- unlist(polys_brackets) #This has brackets
			}
			
			if(length(polys) != 0){
			
	states_ <- c()
		for(n in 1:ncol(data)){
		states_[[n]] <- length(unique(data[,n])[! unique(data[,n]) %in% c("?", polys_brackets)]) #Excludes ambiguities and polymorphisms.
		
		 }
		} else {
			
			states_ <- c()
			for(j in 1:ncol(data)){
			states_[[j]] <- length(unique(data[,j])[! unique(data[,j]) %in% c("?")])
	 		#Excludes ambiguities if polymorphisms not present
} }

state_freq <- c()
for(l in 1:length(sort(unique(unlist(states_))))){ #For each frequency of each character type (as in two-state, three-state etc)
	 
				state_freq[[l]] <- 	table(sort(unlist(states_)))[l] 
					
					 }
					 states <- unlist(state_freq)
					 states_f <- states/sum(states)
					print(states)
					print(states_f)			
}
