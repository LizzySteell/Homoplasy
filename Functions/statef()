##### 2023-10-08

### STATE FREQUENCY FUNCTION v1
######
### Calculate state frequencies in a matrix
statef <- function(data){
	#data - matrix array character taxon matrix
	
	states_ <- c()
		for(i in 1:ncol(data)){
		states_[[i]] <- length(unique(data[,i])[! unique(data[,i]) %in% c("?", "{01}", "{02}", "{03}", "{04}", "{05}", "{06}","{12}", "{13}", "{14}", "{15}", "{16}", "{23}", "{24}", "{25}", "{26}", "{34}", "{35}", "{36}", "{45}", "{46}", "{56}" ,"{012}", "{013}", "{014}", "{015}", "{016}", "{123}", "{124}", "{125}", "{126}", "{134}", "{135}", "{136}", "{145}", "{146}", "{156}", "{234}", "{235}", "{236}", "{245}", "{246}", "{256}", "{345}", "{346}", "{356}", "{456}", "{0123}", "{0124}", "{0125}", "{0126}", "{0134}", "{0135}", "{0136}", "{0145}", "{0146}", "{0156}", "{0234}", "{0235}", "{0236}", "{0245}", "{0246}", "{0256}", "{0345}", "{0346}", "{0356}", "{0456}" )]) #Excludes ambiguities and polymorphisms from being included as another state for each character. If polymorphisms go beyond these options, then they will need to be added into the vector here.
	 
}

state_freq <- c()
for(l in 1:length(sort(unique(unlist(states_))))){ #For each frequency of each character type (as in two-state, three-state etc)
	 
				state_freq[[l]] <- 	table(sort(unlist(states_)))[l] 
					
					 }
					 states <- unlist(state_freq)
					 states_f <- states/sum(states)
					print(states)
					print(states_f)			
}
